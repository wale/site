---
import BlogHead from '../components/BlogHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import ResponsiveIcon from '../components/ResponsiveIcon.astro';

import {format} from "date-fns-tz";
import {parseISO} from "date-fns";
import AltNav from '../components/AltNav.astro';

export interface Props {
	content: {
		title: string;
		description: string;
		pubDate: string;
		navCurrent?: string
		updatedDate?: string;
		heroImage?: string;
	};
}

const {
	content: { title, description, pubDate: _pubDate, updatedDate: _updatedDate, heroImage, navCurrent: _navCurrent },
} = Astro.props;

const navCurrent = _navCurrent ? _navCurrent : "/blog";


// Formatted ISO 8601 dates, which are only passed through to the frontend
// I want to show both local system date, along with the dates in my local
// timezone, but that requires a bit of client-side JS I really don't want
// to add right now. I don't want to scare off privacy minded users, bruh.
// This might be temporary, I don't know yet. We'll see.

// The formats I'm passing through explicitly show the timezone I'm working in (AEST/AEDT),
// as a stand-in for the zero client side JS (besides analytics) requirement
// I have, for reasons.
const fmt = (d: Date) => format(d, "PPPP, h:mm aa OO", { timeZone: "Australia/Melbourne" });

const pubDate = fmt(parseISO(_pubDate));
const updatedDate = _updatedDate ? fmt(parseISO(_updatedDate)) : null;
---

<html lang="en">
	<head>
		<!-- 
			Even though I'm formatting the dates for the frontend, I am sending the raw ISO-8601 dates
			for articles for OpenGraph article embeds to parse correctly. How did I miss this earlier?
		-->
		<BlogHead 
			title={title} 
			description={description} 
			image={heroImage}
			pubDate={_pubDate}
			modDate={_updatedDate} 
		/>
		<style is:global>
			@media screen and (min-width: 600px) {
				code {
					counter-reset: step;
					counter-increment: step 0;
				}

				code .line::before {
					content: counter(step);
					counter-increment: step;
					width: 1rem;
					margin-right: 1.5rem;
					display: inline-block;
					text-align: right;
					color: rgb(166, 173, 200);
				}
			}
		</style>
	</head>
	<body class="flex flex-col bg-base flex-grow text-text w-screen gap-2">
		<AltNav current={navCurrent} />
		<section class="w-full max-w-2xl self-center items-center justify-center p-2.5 sm:m-auto sm:mt-5 sm:p-0">
			<header class="mb-5 flex flex-col gap-4">
				{
					heroImage && (
						<img src={heroImage} class="object-cover rounded-md" />
					)
				}
				<h1 class="text-4xl font-bold">{title}</h1>
				{
					description && (
						<h3 class="text-lg font-light">{description}</h3>
					)
				}
				{
					(pubDate || updatedDate) && (
						<div class="flex flex-col gap-1 text-sm font-light italic">
							{pubDate && <span>{pubDate}</span>}
							{updatedDate && <span>Last updated {updatedDate}</span>}
						</div>
					)
				}
			</header>
			<div class="h-2 bg-gradient-to-r from-red via-blue to-yellow"></div>
			<main class="article-content prose prose-invert pt-4 max-w-none prose-headings:mt-0 prose-headings:mb-0 prose-headings:pb-2">
				<slot />
			</main>
		</section>
		<Footer />
	</body>
</html>